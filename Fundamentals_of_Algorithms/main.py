"""
–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞: –ª–∏–Ω–µ–π–Ω—ã–π –∏ –±–∏–Ω–∞—Ä–Ω—ã–π
"""

# def linear_search(arr, n):
#     c = 0
#     for i in range(len(arr)):
#         c += 1
#         if arr[i] == n:
#             return f"{i} index, {c} comparisons"
#     return -1, c
#
# # print(linear_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))
# db = ['islam','b','d','a']
# search = 'a'
# print(linear_search(db, search))


# def linear_search(arr, n):
#     c = 0
#     for i in arr:
#         c += 1
#         if i == n:
#             return f"{i} , {c} comparisons"
#     return -1, c


#
# def binary_search(arr, target):
#     left, right = 0, len(arr) - 1
#     c = 0
#     while left <= right:
#         mid = (left + right) // 2
#         c += 1
#         if arr[mid] == target:
#             return f"{mid} index, {c} comparisons"
#         elif arr[mid] < target:
#             left = mid + 1
#         else:
#             right = mid - 1
#     return -1, c
#
# print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))


# students = ["Alice", "Bob", "Charlie", "David", "Eve"]
#
# def linear_search_student(students, name):
#     print(f"Students: {students}")
#     print(f"Searching for: {name}\n")
#
#     for i, student in enumerate(students):
#         print(f"Step {i + 1}: checking {student}")
#         if student == name:
#             print(f"‚úÖ Found {name} at index {i} after {i + 1} comparisons!")
#             return i
#     print(f"‚ùå {name} not found in the list.")
#     return -1
#
#
# linear_search_student(students, "David")


"""
–ê–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
"""
# –ü—É–∑—ã—Ä—å–∫–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (Bubble Sort)
# def bubble_sort(arr):
#     n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
            print(arr)
    return arr
#
# # –ü—Ä–∏–º–µ—Ä
# numbers = [5, 2, 9, 1, 5]
# sorted_numbers = bubble_sort(numbers)
# print("Sorted:", sorted_numbers)

# ‚É£ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ (Insertion Sort)
#
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j+1] = arr[j]
            j -= 1
        arr[j+1] = key
        print(arr)
    return arr
#
# numbers = [5, 2, 9, 1, 5]
# sorted_numbers = insertion_sort(numbers)
# print("Sorted:", sorted_numbers)


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–±–æ—Ä–æ–º (Selection Sort)
def selection_sort(arr):
    n = len(arr)
    for i in range(n):
        min_index = i
        for j in range(i+1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i]
        print(arr)
    return arr
#
# numbers = [5, 2, 9, 1, 5]
# sorted_numbers = selection_sort(numbers)
# print("Sorted:", sorted_numbers)

"""
–ê–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
"""
"""
| –û–±–ª–∞—Å—Ç—å                      | –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è                              |
| ---------------------------- | ------------------------------------------------- |
| üß≠ **–•–µ—à-—Ç–∞–±–ª–∏—Ü—ã / —Å–ª–æ–≤–∞—Ä–∏** | –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É                     |
| üîê **–ü–∞—Ä–æ–ª–∏**                | –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –≤ –≤–∏–¥–µ —Ö–µ—à–∞ (–Ω–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ) |
| üßæ **–ö–æ–Ω—Ç—Ä–æ–ª—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏**  | –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª                       |
| üß† **–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö / –∫—ç—à**     | –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π            |
"""
"""
"Hello"  ‚Üí  8b1a9953c4611296a827abf8c47804d7
"""
# def simple_hash(text):
#     hash_value = 0
#     for char in text:
#         hash_value += ord(char)  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –≤ —á–∏—Å–ª–æ (–∫–æ–¥)
#     return hash_value % 100  # –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
#
# print(simple_hash("Islam"))
# print(simple_hash("IslAm"))

# import hashlib
#
# # –°—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ –±–∞–π—Ç—ã
# text = "IslamDuishobaev".encode()
#
# # –ü—Ä–∏–º–µ—Ä —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º MD5
# hash_md5 = hashlib.md5(text).hexdigest()
#
# # –ü—Ä–∏–º–µ—Ä —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º SHA256 (–Ω–∞–¥—ë–∂–Ω–µ–µ)
# hash_sha256 = hashlib.sha256(text).hexdigest()
#
# print("MD5:", hash_md5)
# print("SHA256:", hash_sha256)

"""
üß∞ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö

–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Django, Flask)

–°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π: Git –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SHA1 –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–º–∏—Ç–æ–≤

–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –∫–ª—é—á–∏ –≤ Redis, MongoDB –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö ‚Äî —ç—Ç–æ —Ö–µ—à–∏
"""


"""
–†–µ–∫—É—Ä—Å–∏—è
"""
# def countdown(n):
#     if n == 0:  # –±–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π
#         print("–°—Ç–∞—Ä—Ç!")
#     else:
#         print(n)
#         countdown(n - 1)  # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
#
# countdown(5)
#
# def list_sum(numbers):
#     if not numbers:  # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
#         return 0
#     return numbers[0] + list_sum(numbers[1:])
#
# print(list_sum([1, 2, 3, 4, 5]))
#
#
# def factorial(n):
#     if n == 1:
#         return 1
#     else:
#         return n * factorial(n - 1)
# #
# print(factorial(5))